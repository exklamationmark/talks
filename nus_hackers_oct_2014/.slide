In Murphy, we trust

Mark
Software Engineer, Viki

* outline

- Bits & Murphy
- What is Viki, and what we do there ?
- Assumption No.1: Computation is fast
- Assumption No.2: Transport cost is zero
- Assumption No.3: Things just works
- Conclusion

* Bits and Murphy

* 

.image img_murphy_law.png

* Really?

.image img_laws.png

* Viki

* 

.iframe http:///www.youtube.com/embed/wVH--bLiVZ8 600 980

* the Platform

* 

Essentially, ensuring this happen

	$> curl -X GET 'http://api.viki.io/v4/videos/1032054v.json'
  
	{
		id: "1032054v",
		created_at: "2014-02-14T08:51:02Z",
		updated_at: "2014-04-28T06:18:25Z",
		titles: {
			en: "TWO WEEKS"
		},
		container: {
			id: "22451c",
			type: "series",
			titles: {
				en: "The Office Season 5"
			},
			...
		}
		...
	}

* Challenges

* 

- 7M+ users, 2-3M active, 1000 request/s (60k/min)
- many moving components (~30 services) working together
- Murphy makes sure everything and anything fails

* How often does something crash?

* 

- Assume your app fails once every half a year (180 day)
- With 28 apps, how often is a failure  ?

Once every 2 day. Optimistically

.image img_sky_diving.gif

* 

.image img_life_gets_harder.jpg

* The scaling story

* 

A typical web app:

.image img_typical_web_stack.png

* 

.image img_homer_disperato.jpg

* Symptoms

- I love the service, but your site are just way tooooo slooow...
- Dude! All API call are taking 5-6s to return. Why!
- All-time high 499, 400, 500, ... Is the sky falling?

* Computation does not happend in zero time

* Printf

	I 2014-03-04T13:19:30Z 109ms SELECT * FROM videos WHERE id = '123v'
	I 2014-03-04T13:20:30Z 121ms /v5/videos/123v.json
	I 2014-03-04T13:19:30Z 106ms SELECT * FROM containers WHERE id = '50c'
	I 2014-03-04T13:20:30Z 145ms /v5/container/50c.json
	I 2014-03-04T13:19:30Z 96ms SELECT * FROM containers WHERE id = '2919c'
	I 2014-03-04T13:20:30Z 119ms /v5/container/2919c.json
	I 2014-03-04T13:19:30Z 2.73s SELECT * FROM videos WHERE japanese_subtitle >= 50
	I 2014-03-04T13:20:30Z 3.23s /v5/videos.json?japanese_completion=50
	I 2014-03-04T13:19:30Z 132ms SELECT * FROM videos WHERE id = '943012v'
	I 2014-03-04T13:20:30Z 174mss /v5/videos/943012v.json
	I 2014-03-04T13:19:30Z 103ms SELECT * FROM videos WHERE id = '482415v'
	I 2014-03-04T13:20:30Z 158ms /v5/videos/482415v.json

- Operations within the app takes too long
- Most likely: querying takes too long

* 

	# SELECT * FROM videos WHERE japanese_completion >= 50;
	# EXPLAIN SELECT * FROM videos WHERE japanese_completion >= 50;
	                       QUERY PLAN                        
	----------------------------------------------------------
	 Seq Scan on videos (cost=0.00...105314.30 rows=28016 width=590)
	   Filter: (japanese_completion >= 50)
	(28016 rows)

- Scan on 100k rows? Even O(n) is bad here

* 

	# CREATE INDEX ON videos (japanese_completion);
	# EXPLAIN SELECT * FROM videos WHERE japanese_completion >= 50;
	                                   QUERY PLAN                                   
	--------------------------------------------------------------------------------
	 Index Scan using videos_japanese_complention_idx on videos  (cost=0.00..232.26 rows=28016 width=531)
	   Index Cond: (japanese_completion >= 50)

- Now that's *500* times faster
- There's a catch though, your `Insert`, `Update` is now slower

* Transport cost is not zero

* 1 + N

	SELECT * FROM videos WHERE container_id = '50c';        //23519v, 82923v, 32927v, ...
	SELECT * FROM videos WHERE id = '23519v';
	SELECT * FROM videos WHERE id = '82923v';
	SELECT * FROM videos WHERE id = '32927v';
 
	videos = Video.Where(container_id: id)
	for v in videos do
		...
	end

.image img_real_query_cost.png

* Again, computing things are not fast

* More complicated requests are still slow

	videos = Video.joins(:list_items).where('list_items.list_id' => '1l')
	to_render = holdbacks_filter(videos)
	sort_by_popularity(to_render)

	def holdbacks_filter(videos)
		# rules = Holdbacks where(:country => current_country, valid_from <= now, valid_until >= now)
		# rules.sort by priority
		# for video in videos do
		# 	for rule in rules do
		#			results << if valid(video, rule)
		# 	end
		# end
		return results
	end

- 2-3 such request per page load
- Querying from DB gives bad performance

* Data access pattern

- Read heavy, little write
- 20kB per any row (that's around no of words on 10 A4 pages, 12pt)
- 250k -> 500k videos: (20 * 500000)/(1024*1024) ~ 10GB
- That can feed into memory
- Put these into Redis, and query from there

* A fast data store for read

.image img_fast_query_redis.png


* Results

- 100ms => 15ms (x10)
- DB load goes way down

* Nothing runs forever

* 

Murphy ensures things happen when they shouldn't

- OS crash
- Hard-disk failure
- Data-center outage (cable cut)
- Someone with free time "trying the API"

* The cat has nine-lives. So is our services

.image img_cluster.png

* Inside a cluster

.image img_inside_cluster.png

* What's actually there

.image img_actual_clusters.png

* Results
- When there is outage, we can auto-swap traffic to other places
- Failure is contained

* Sums up

* 

- When things scale, look at them in a differently
- [[http://en.wikipedia.org/wiki/Fallacies_of_distributed_computing][Never assume]]
- Understand Datastructure and algorigthms, OS, Network
- ABC (Always be coding)

* engineering.viki.com/internship
