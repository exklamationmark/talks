Concurrency patterns in Golang
Tags: golang, concurrency, viki

Mark
Software Engineer, Viki

* main()

Today's agenda

- Get introduced to Go's concurrency
- See how it's applied in Viki context

* import `terms`

Parallelism

  Simultaneous *execution* of (possibly related computation) (i.e: on 2 different proecssor)

Concurrency

  Composition of independently executing processes



* an analogy

* gophers and books




.image move_books_problem.png

moving books to the incinerator


* speed things up



.image move_books_problem_add_gopher.png


* speed things up (cont.)

.image move_books_problem_add_cart.png

* speed things up (cont.)

.image move_books_problem_parallel.png

What we ususally imagine _parallel_ to be

* a different design

.image move_books_2_concurrent_design.png

* a different design (cont.)

.image move_books_2_parallel.png

* another design

.image move_books_3_concurrent_design.png

* another design (cont.)

.image move_books_3_parallel.png

* Concurrency vs Parallelism

(true) Parallelism is about running many things at the same time

Concurrency is about breaking down things into independent steps
The steps are independent, and can run in parallel

Another analogy

- 2 threads running on a single CPU
- 2 threads running on different CPUs

* Goroutines

* Goroutines (cont.)

.play boring.go /START OMIT/,/END OMIT/

.play many_boring.go /START OMIT/,/END OMIT/

* Channels

* Channels (cont.)

  Let's wait for 2 books & burn them

.play channel.go /START OMIT/,/END OMIT/

* Precomputing data

.image holdbacks_computation.png

* Previously

done as ruby script, takes around 45 minutes & a lot of memory
need to transform the entire set of rules all the time

*Problem*

- Slow
- Ineffective CPU Utilization

* Redesign

.image holdbacks_redesigned.png

* Why Go?

There are other options: multiple Ruby workers, Node.js workers

However, Go gives good performance while maintaining high-level structure

* Hence

.code holdbacks_transformer.go /START OMIT/,/END OMIT/

* Generator

.code holdbacks_generator.go /START OMIT/,/END OMIT/

* Worker

.code holdbacks_merge.go /START OMIT/,/END OMIT/

* Merge (a concurrency pattern)

.code holdbacks_worker.go /START OMIT/,/END OMIT/

* Pros and Cons

*Pros*

- Easy to write, (almost) no problem with concurrency
- Easy to scale when needed
- Built-in race condition detection (`go race`)

*Cons*

- More code :)



* We are hiring: viki.com/jobs
